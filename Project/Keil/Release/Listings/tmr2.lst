C51 COMPILER V9.60.7.0   TMR2                                                              05/24/2025 16:58:00 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TMR2
OBJECT MODULE PLACED IN .\Release\Objects\tmr2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\Hardware\tmr2.c LARGE OPTIMIZE(9,SIZE) BROWSE ORDER INTVECTOR(0X00
                    -0C) INCDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Rele
                    -ase\Listings\tmr2.lst) OBJECT(.\Release\Objects\tmr2.obj)

line level    source

   1          // 定时器TMR2的驱动源文件
   2          #include "tmr2.h"
   3          
   4          // 定时器定时周期 (单位:Hz)
   5          // 周期值 = 系统时钟 / 定时器分频 / 频率 - 1
   6          #define TMR2_PERIOD (SYSCLK / 1 / 20000 - 1) // 20khz，50us
   7          // #define TMR2_PERIOD (SYSCLK / 1 / 10000 - 1) // 10khz，100us
   8          
   9          // static volatile u8 tmr2_cnt = 0; // 定时器TMR2的计数值（每次在中断服务函数中会加一
             -）
  10          
  11          /**
  12           * @brief 配置定时器TMR2，配置完成后，定时器默认关闭
  13           */
  14          void tmr2_config(void)
  15          {
  16   1          __SetIRQnIP(TMR2_IRQn, TMR2_IQn_CFG); // 设置中断优先级
  17   1          __DisableIRQ(TMR2_IRQn);              // 禁用中断
  18   1          IE_EA = 1;                            // 打开总中断
  19   1      
  20   1          // 清除TMR2的计数值
  21   1          TMR_ALLCON = TMR2_CNT_CLR(0x1); // 清除计数值
  22   1      
  23   1          TMR2_CONL &= ~TMR_PRESCALE_SEL(0x07); // 清除TMR2的预分频配置寄存器
  24   1          TMR2_CONL |= TMR_PRESCALE_SEL(0x0);   // 定时器预分频
  25   1          TMR2_CONL &= ~TMR_MODE_SEL(0x03);     // 清除TMR2的模式配置寄存器
  26   1          TMR2_CONL |= TMR_MODE_SEL(0x01);      // 配置TMR2的模式为计数器模式，最后对系统时钟
             -的脉冲进行计数
  27   1      
  28   1          // 配置TMR2的计数周期
  29   1          TMR2_PRH = TMR_PERIOD_VAL_H((TMR2_PERIOD >> 8) & 0xFF); // 周期值
  30   1          TMR2_PRL = TMR_PERIOD_VAL_L((TMR2_PERIOD >> 0) & 0xFF);
  31   1      
  32   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除TMR2的时钟源配置寄存器
  33   1          TMR2_CONL |= TMR_SOURCE_SEL(0x05);    // 配置TMR2的时钟源，不用任何时钟
  34   1          TMR2_CONH &= ~TMR_PRD_PND(0x01);      // 清除TMR2的计数标志位，表示未完成计数
  35   1          TMR2_CONH |= TMR_PRD_IRQ_EN(1);       // 使能TMR2的计数中断
  36   1      }
  37          
  38          /**
  39           * @brief 开启定时器TMR2，开始计时
  40           */
  41          void tmr2_enable(void)
  42          {
  43   1          // 重新给TMR2配置时钟
  44   1          TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
  45   1          TMR2_CONL |= TMR_SOURCE_SEL(0x06);    // 配置定时器的时钟源，使用系统时钟
  46   1      
  47   1          __EnableIRQ(TMR2_IRQn); // 使能中断
  48   1          IE_EA = 1;              // 打开总中断
  49   1      }
  50          
  51          #if 0  // void tmr2_disable(void)
C51 COMPILER V9.60.7.0   TMR2                                                              05/24/2025 16:58:00 PAGE 2   

              /**
               * @brief 关闭定时器，清空计数值
               */
              void tmr2_disable(void)
              {
                  // 不给定时器提供时钟，让它停止计数
                  TMR2_CONL &= ~(TMR_SOURCE_SEL(0x07)); // 清除定时器的时钟源配置寄存器
                  TMR2_CONL |= TMR_SOURCE_SEL(0x05);    // 配置定时器的时钟源，不用任何时钟
              
                  TMR_ALLCON = TMR2_CNT_CLR(0x1); // 清除计数值
              
                  __DisableIRQ(TMR2_IRQn); // 关闭中断（不使能中断）
              }
              #endif // void tmr2_disable(void)
  66          
  67          // TMR2中断服务函数
  68          void TIMR2_IRQHandler(void) interrupt TMR2_IRQn
  69          {
  70   1          // 上升沿检测
  71   1          static volatile bit last_engine_speed_scan_level = 0; // 记录上一次检测到的引脚电平
  72   1          static volatile bit last_speed_scan_level = 0;        // 记录上一次检测到的引脚电平
  73   1      
  74   1          // 进入中断设置IP，不可删除
  75   1          __IRQnIPnPush(TMR2_IRQn);
  76   1          // P20 = 1; // 测试中断持续时间(约3us)
  77   1      
  78   1          // ---------------- 用户函数处理 -------------------
  79   1          // 周期中断
  80   1          if (TMR2_CONH & TMR_PRD_PND(0x1))
  81   1          {
  82   2              TMR2_CONH |= TMR_PRD_PND(0x1); // 清除pending
  83   2      
  84   2              if (ENGINE_SPEED_SCAN_PIN) // 检测发动机转速的引脚
  85   2              {
  86   3                  if (0 == last_engine_speed_scan_level)
  87   3                  {
  88   4                      // 如果之前检测到低电平，现在检测到高电平，说明有上升沿，对脉
             -冲计数加一
  89   4                      if (detect_engine_pulse_cnt[0] < 4294967295) // 防止计数溢出
  90   4                      {
  91   5                          detect_engine_pulse_cnt[0]++;
  92   5                      }
  93   4                  }
  94   3      
  95   3                  last_engine_speed_scan_level = 1;
  96   3              }
  97   2              else
  98   2              {
  99   3                  // 如果现在检测到低电平
 100   3                  last_engine_speed_scan_level = 0;
 101   3              }
 102   2      
 103   2              if (SPEED_SCAN_PIN) // 检测时速的引脚
 104   2              {
 105   3                  if (0 == last_speed_scan_level)
 106   3                  {
 107   4                      // 如果之前检测到低电平，现在检测到高电平，说明有上升沿，对脉
             -冲计数加一
 108   4                      if (detect_speed_pulse_cnt[0] < 4294967295) // 防止计数溢出
 109   4                      {
 110   5                          detect_speed_pulse_cnt[0]++;
 111   5                      }
C51 COMPILER V9.60.7.0   TMR2                                                              05/24/2025 16:58:00 PAGE 3   

 112   4                  }
 113   3      
 114   3                  last_speed_scan_level = 1;
 115   3              }
 116   2              else
 117   2              {
 118   3                  // 如果现在检测到低电平
 119   3                  last_speed_scan_level = 0;
 120   3              }
 121   2          }
 122   1      
 123   1          // P20 = 0; // 测试中断持续时间
 124   1          // 退出中断设置IP，不可删除
 125   1          __IRQnIPnPop(TMR2_IRQn);
 126   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    242    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
